    #include <iostream>
    #include <iomanip>
    #include <string>
    #include <fstream>
    #include <vector>

    using namespace std;

    struct Node
    {
        string name;
        string phone;
        Node *left;
        Node *right;
        int height;
    };

    Node *root = nullptr;

    int height(Node *N)
    {
        if (N == nullptr)
            return 0;
        return N->height;
    }

    int max(int a, int b)
    {
        return (a > b) ? a : b;
    }

    Node *newNode(string name, string phone)
    {
        Node *node = new Node();
        node->name = name;
        node->phone = phone;
        node->left = nullptr;
        node->right = nullptr;
        node->height = 1;
        return node;
    }

    Node *rightRotate(Node *y)
    {
        Node *x = y->left;
        Node *T2 = x->right;
        x->right = y;
        y->left = T2;
        y->height = max(height(y->left), height(y->right)) + 1;
        x->height = max(height(x->left), height(x->right)) + 1;
        return x;
    }

    Node *leftRotate(Node *x)
    {
        Node *y = x->right;
        Node *T2 = y->left;
        y->left = x;
        x->right = T2;
        x->height = max(height(x->left), height(x->right)) + 1;
        y->height = max(height(y->left), height(y->right)) + 1;
        return y;
    }

    int getBalance(Node *N)
    {
        if (N == nullptr)
            return 0;
        return height(N->left) - height(N->right);
    }

    Node *insertAVL(Node *node, string name, string phone)
    {
        if (node == nullptr)
            return newNode(name, phone);
        if (phone < node->phone)
            node->left = insertAVL(node->left, name, phone);
        else if (phone > node->phone)
            node->right = insertAVL(node->right, name, phone);
        else
            return node;

        node->height = 1 + max(height(node->left), height(node->right));
        int balance = getBalance(node);

        if (balance > 1 && phone < node->left->phone)
            return rightRotate(node);
        if (balance < -1 && phone > node->right->phone)
            return leftRotate(node);
        if (balance > 1 && phone > node->left->phone)
        {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        if (balance < -1 && phone < node->right->phone)
        {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }
        return node;
    }

    Node *insertBST(Node *node, string name, string phone)
    {
        if (node == nullptr)
            return newNode(name, phone);
        if (phone < node->phone)
            node->left = insertBST(node->left, name, phone);
        else if (phone > node->phone)
            node->right = insertBST(node->right, name, phone);
        return node;
    }

    Node *minValueNode(Node *node)
    {
        Node *current = node;
        while (current->left != nullptr)
            current = current->left;
        return current;
    }

    Node *deleteNodeBST(Node *root, string phone)
    {
        if (root == nullptr)
            return root;

        if (phone < root->phone)
            root->left = deleteNodeBST(root->left, phone);
        else if (phone > root->phone)
            root->right = deleteNodeBST(root->right, phone);
        else
        {
            if (root->left == nullptr || root->right == nullptr)
            {
                Node *temp = root->left ? root->left : root->right;

                if (temp == nullptr)
                {
                    temp = root;
                    root = nullptr;
                }
                else
                {
                    *root = *temp;
                }
                delete temp;
            }
            else
            {
                Node *temp = minValueNode(root->right);
                root->phone = temp->phone;
                root->name = temp->name;
                root->right = deleteNodeBST(root->right, temp->phone);
            }
        }
        return root;
    }

    Node *deleteNodeAVL(Node *root, string phone)
    {
        if (root == nullptr)
            return root;

        if (phone < root->phone)
            root->left = deleteNodeAVL(root->left, phone);
        else if (phone > root->phone)
            root->right = deleteNodeAVL(root->right, phone);
        else
        {
            if (root->left == nullptr || root->right == nullptr)
            {
                Node *temp = root->left ? root->left : root->right;

                if (temp == nullptr)
                {
                    temp = root;
                    root = nullptr;
                }
                else
                {
                    *root = *temp;
                }
                delete temp;
            }
            else
            {
                Node *temp = minValueNode(root->right);
                root->phone = temp->phone;
                root->name = temp->name;
                root->right = deleteNodeAVL(root->right, temp->phone);
            }
        }

        if (root == nullptr)
            return root;

        root->height = 1 + max(height(root->left), height(root->right));

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root->left) >= 0)
            return rightRotate(root);

        if (balance > 1 && getBalance(root->left) < 0)
        {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root->right) <= 0)
            return leftRotate(root);

        if (balance < -1 && getBalance(root->right) > 0)
        {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    void displayTableHeader()
    {
        cout << "+" << string(5, '-') << "+" << string(20, '-') << "+" << string(15, '-') << "+" << endl;
        cout << "|" << left << setw(5) << "ID" << "|" << setw(20) << "Nama" << "|" << setw(15) << "Telepon" << "|" << endl;
        cout << "+" << string(5, '-') << "+" << string(20, '-') << "+" << string(15, '-') << "+" << endl;
    }

    void displayNode(Node *root, int &idCounter)
    {
        if (root != nullptr)
        {
            displayNode(root->left, idCounter);

            cout << "|" << left << setw(5) << idCounter << "|" << setw(20) << root->name << "|" << setw(15) << root->phone << "|" << endl;

            cout << "+" << string(5, '-') << "+" << string(20, '-') << "+" << string(15, '-') << "+" << endl;
            idCounter++;
            displayNode(root->right, idCounter);
        }
    }

    void displayContacts(Node *root)
    {
        if (root == nullptr)
        {
            cout << "Tidak ada kontak untuk ditampilkan.\n";
            return;
        }
        displayTableHeader();

        int idCounter = 1;
        displayNode(root, idCounter);
    }

    string toLowerCase(string str)
    {
        for (char &c : str)
            c = tolower(c);
        return str;
    }

    Node *searchByName(Node *root, string name)
    {
        if (root == nullptr)
            return nullptr;

        string lowerName = toLowerCase(name);
        string lowerNodeName = toLowerCase(root->name);

        if (lowerNodeName == lowerName)
            return root;

        Node *found = searchByName(root->left, name);
        if (found != nullptr)
            return found;

        return searchByName(root->right, name);
    }

    vector<Node *> searchContacts(Node *root, string keyword)
    {
        vector<Node *> results;
        if (root == nullptr)
            return results;

        string lowerKeyword = toLowerCase(keyword);
        string lowerNodeName = toLowerCase(root->name);

        if (lowerNodeName.find(lowerKeyword) != string::npos)
            results.push_back(root);

        vector<Node *> leftResults = searchContacts(root->left, keyword);
        vector<Node *> rightResults = searchContacts(root->right, keyword);

        results.insert(results.end(), leftResults.begin(), leftResults.end());
        results.insert(results.end(), rightResults.begin(), rightResults.end());

        return results;
    }

    void searchAndDisplayContacts(Node *root, string keyword)
    {
        vector<Node *> results = searchContacts(root, keyword);

        if (results.empty())
        {
            cout << "Tidak ada kontak dengan kata kunci \"" << keyword << "\".\n";
            return;
        }

        cout << "Ditemukan " << results.size() << " kontak dengan kata kunci \"" << keyword << "\":\n";

        displayTableHeader();

        int idCounter = 1;
        for (Node *contact : results)
        {
            cout << "|" << left << setw(5) << idCounter << "|" << setw(20) << contact->name << "|" << setw(15) << contact->phone << "|" << endl;
            cout << "+" << string(5, '-') << "+" << string(20, '-') << "+" << string(15, '-') << "+" << endl;
            idCounter++;
        }
    }

    Node *editContactBST(Node *root, string oldName, string newName, string newPhone)
    {
        Node *contact = searchByName(root, oldName);
        if (contact == nullptr)
        {
            cout << "Kontak dengan nama " << oldName << " tidak ditemukan. Silakan coba lagi.\n";
            return root;
        }

        root = deleteNodeBST(root, contact->phone);

        root = insertBST(root, newName, newPhone);

        return root;
    }

    Node *editContactAVL(Node *root, string oldName, string newName, string newPhone)
    {
        Node *contact = searchByName(root, oldName);
        if (contact == nullptr)
        {
            cout << "Kontak dengan nama " << oldName << " tidak ditemukan. Silakan coba lagi.\n";
            return root;
        }

        root = deleteNodeAVL(root, contact->phone);

        root = insertAVL(root, newName, newPhone);

        return root;
    }

    void saveToFile(Node *root, ofstream &file)
    {
        if (root != nullptr)
        {
            saveToFile(root->left, file);
            file << root->name << "," << root->phone << endl;
            saveToFile(root->right, file);
        }
    }

    void updateFile(Node *root)
    {
        ofstream file("kontak.txt", ios::trunc);
        if (file.is_open())
        {
            saveToFile(root, file);
            file.close();
            cout << "Data berhasil disimpan ke file.\n";
        }
        else
        {
            cout << "Gagal menyimpan ke file.\n";
        }
    }

    void loadFile(Node *&root, bool useAVL)
    {
        ifstream file("kontak.txt");
        if (file.is_open())
        {
            string line;
            while (getline(file, line))
            {
                size_t commaPos = line.find(',');
                if (commaPos != string::npos)
                {
                    string name = line.substr(0, commaPos);
                    string phone = line.substr(commaPos + 1);
                    if (useAVL)
                    {
                        root = insertAVL(root, name, phone);
                    }
                    else
                    {
                        root = insertBST(root, name, phone);
                    }
                }
            }
            file.close();
        }
        else
        {
            cout << "File kontak.txt tidak ditemukan.\n";
            cout << "Memasukkan data set awal sebanyak 10 data\n\n";
        }
    }

    void dataSet(Node *&root, bool useAVL)
    {
        vector<pair<string, string>> initialContacts = {
            
            {"Amsal Adrian", "086958463312"},
            {"Bryan Benedict", "086648493012"},
            {"Alicia", "085647293012"},
            {"Bernard", "086758493234"},
            {"Charlie Puth", "086978547293"},
            {"Desinta Ciew", "086759384543"},
            {"Evelyn", "086749283431"},
            {"Frankesnstein", "086749583215"},
            {"Greg Jo", "086730192033"},
            {"Hubolt Point", "086620192832"}};

        for (const auto &contact : initialContacts)
        {
            if (useAVL)
            {
                root = insertAVL(root, contact.first, contact.second);
            }
            else
            {
                root = insertBST(root, contact.first, contact.second);
            }
        }

        updateFile(root);
        cout << "Membaca file kontak.txt'.\n";
    }

    int main()
    {
        Node *rootAVL = nullptr;
        Node *rootBST = nullptr;
        bool useAVL = true;

        cout << "Pilih mode: \n1. AVL Tree\n2. Binary Search Tree (BST)\n3. Keluar dari Program\nPilih: ";
        int modeChoice;
        cin >> modeChoice;
        cin.ignore();

        if (modeChoice == 3)
        {
            cout << "Keluar dari program.\n";
            return 0;
        }

        if (modeChoice == 1)
        {
            useAVL = true;
        }
        else if (modeChoice == 2)
        {
            useAVL = false;
        }
        else
        {
            cout << "Pilihan tidak valid. Silakan coba lagi.\n";
        }

        loadFile(useAVL ? rootAVL : rootBST, useAVL);

        dataSet(useAVL ? rootAVL : rootBST, useAVL);

        int choice;
        string name, phone, newName, newPhone;

        while (true)
        {
            cout << "\nMenu\n1. Tambah Kontak\n2. Hapus Kontak\n3. Lihat Kontak\n4. Cari Kontak\n5. Edit Kontak\n6. Keluar\nPilih: ";
            cin >> choice;
            cin.ignore();

            switch (choice)
            {
            case 1:
            {
                cout << "Masukkan Nama: ";
                getline(cin, name);
                cout << "Masukkan Nomor Telepon: ";
                cin >> phone;

                if (useAVL)
                {
                    rootAVL = insertAVL(rootAVL, name, phone);
                }
                else
                {
                    rootBST = insertBST(rootBST, name, phone);
                }

                cout << "Kontak berhasil disimpan.\n";
                updateFile(useAVL ? rootAVL : rootBST);
                break;
            }
            case 2:
            {
                cout << "Masukkan Nama Kontak yang ingin dihapus: ";
                getline(cin, name);
                Node *contact = searchByName(useAVL ? rootAVL : rootBST, name);

                if (contact != nullptr)
                {
                    cout << "Kontak Ditemukan: Nama: " << contact->name << ", Telepon: " << contact->phone << endl;
                    if (useAVL)
                    {
                        rootAVL = deleteNodeAVL(rootAVL, contact->phone);
                    }
                    else
                    {
                        rootBST = deleteNodeBST(rootBST, contact->phone);
                    }
                    cout << "Kontak berhasil dihapus.\n";
                    updateFile(useAVL ? rootAVL : rootBST);
                }
                else
                {
                    cout << "Kontak dengan nama " << name << " tidak ditemukan.\n";
                }
                break;
            }

            case 3:
            {
                cout << "Daftar Kontak:\n";
                displayContacts(useAVL ? rootAVL : rootBST);
                break;
            }
            case 4:
            {
                cout << "Masukkan nama kontak yang ingin dicari: ";
                getline(cin, name);
                searchAndDisplayContacts(useAVL ? rootAVL : rootBST, name);
                break;
            }

            case 5:
            {
                cout << "Masukkan Nama Kontak yang ingin diedit: ";
                getline(cin, name);
                Node *contact = searchByName(useAVL ? rootAVL : rootBST, name);

                if (contact != nullptr)
                {
                    cout << "Kontak Ditemukan: Nama: " << contact->name << ", Telepon: " << contact->phone << endl;
                    cout << "Masukkan Nama Baru (atau tekan Enter untuk tidak mengubah): ";
                    getline(cin, newName);
                    cout << "Masukkan Nomor Telepon Baru (atau tekan Enter untuk tidak mengubah): ";
                    getline(cin, newPhone);

                    if (newName.empty())
                        newName = contact->name;
                    if (newPhone.empty())
                        newPhone = contact->phone;

                    if (useAVL)
                    {
                        rootAVL = editContactAVL(rootAVL, contact->name, newName, newPhone);
                    }
                    else
                    {
                        rootBST = editContactBST(rootBST, contact->name, newName, newPhone);
                    }
                    cout << "Kontak berhasil diedit.\n";
                    updateFile(useAVL ? rootAVL : rootBST);
                }
                else
                {
                    cout << "Kontak dengan nama " << name << " tidak ditemukan.\n";
                }
                break;
            }
            case 6:
            {
                cout << "Keluar dari program\n";
                return 0;
            }
            default:
            {
                cout << "Pilihan tidak valid.\n";
                break;
            }
            }
        }
    }
